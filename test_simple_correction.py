#!/usr/bin/env python3
"""
Teste simples para verificar se a corre√ß√£o do bias funcionou
"""

import sys
import os
sys.path.insert(0, os.path.dirname(__file__))

def test_import():
    """Testar se conseguimos importar ap√≥s as corre√ß√µes"""
    try:
        print("Testando importa√ß√£o dos m√≥dulos...")
        
        from src.config import Config
        print("‚úÖ Config importado")
        
        from src.market_data import MarketDataManager
        print("‚úÖ MarketDataManager importado")
        
        from src.ai_engine import AITradingEngine
        print("‚úÖ AITradingEngine importado")
        
        from src.signal_generator import SignalGenerator
        print("‚úÖ SignalGenerator importado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na importa√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_basic_functionality():
    """Teste b√°sico de funcionalidade"""
    try:
        from src.config import Config
        from src.market_data import MarketDataManager  
        from src.ai_engine import AITradingEngine
        
        config = Config()
        market_data = MarketDataManager(config)
        ai_engine = AITradingEngine(config)
        
        print("‚úÖ Componentes inicializados")
        
        # Testar se a IA n√£o est√° mais em modo de teste
        symbol = "BTCUSDT"
        df = market_data.get_historical_data(symbol, "1h", 100)
        
        if df is not None and not df.empty:
            print(f"‚úÖ Dados obtidos: {len(df)} registros")
            
            # Preparar features
            df_features = ai_engine.prepare_features(df)
            print(f"‚úÖ Features preparadas: {df_features.shape}")
            
            # Testar predi√ß√£o
            prediction = ai_engine.predict_signal(df_features, symbol)
            print(f"üìä Predi√ß√£o da IA: {prediction}")
            
            # Verificar se n√£o est√° mais em modo de teste
            if prediction.get('test_mode'):
                print("‚ùå AINDA EM MODO DE TESTE!")
                return False
            else:
                print("‚úÖ Modo de teste desativado!")
                return True
        else:
            print("‚ùå N√£o conseguiu obter dados")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("=== TESTE SIMPLES P√ìS-CORRE√á√ÉO ===")
    
    if test_import():
        print("\n=== TESTE DE FUNCIONALIDADE ===")
        if test_basic_functionality():
            print("\nüéØ CORRE√á√ÉO BEM-SUCEDIDA!")
        else:
            print("\n‚ùå AINDA H√Å PROBLEMAS")
    else:
        print("\n‚ùå FALHA NA IMPORTA√á√ÉO")
