#!/usr/bin/env python3
"""
Comparar sinal gerado via API vs Script usando dados reais
"""

import json
import requests
from datetime import datetime
import sys
import os
import pandas as pd
import numpy as np

# Adicionar caminho do projeto
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.ai_engine import AITradingEngine
from src.market_data import MarketDataManager
from src.config import Config

def get_api_signal():
    """Obter sinal via API"""
    try:
        url = "http://localhost:5000/api/generate_signal"
        payload = {
            "symbol": "BTCUSDT",
            "timeframe": "1h"
        }
        
        response = requests.post(url, json=payload, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                return data.get('signal')
            else:
                print(f"‚ùå API retornou erro: {data.get('message')}")
                return None
        else:
            print(f"‚ùå API retornou status {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro ao chamar API: {e}")
        return None

def get_real_market_data():
    """Obter dados reais de mercado via API"""
    try:
        # Usar a API de pre√ßos do pr√≥prio app
        url = "http://localhost:5000/api/price/BTCUSDT"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            price_data = response.json()
            current_price = float(price_data.get('price', 100000))
            
            # Simular dados baseados no pre√ßo real
            periods = 150
            dates = pd.date_range(end=datetime.now(), periods=periods, freq='h')
            
            # Gerar dados simulados baseados no pre√ßo atual
            volatility = 0.02  # 2% de volatilidade hor√°ria
            prices = []
            base_price = current_price * 0.98  # Come√ßar um pouco abaixo
            
            for i in range(periods):
                # Simular movimento de pre√ßo com tend√™ncia
                change = np.random.normal(0, volatility)
                if i == 0:
                    price = base_price
                else:
                    price = prices[-1] * (1 + change)
                prices.append(price)
            
            # Ajustar o √∫ltimo pre√ßo para ser pr√≥ximo do atual
            prices[-1] = current_price
            
            # Criar DataFrame
            df = pd.DataFrame({
                'timestamp': dates,
                'open': prices,
                'high': [p * (1 + abs(np.random.normal(0, 0.005))) for p in prices],
                'low': [p * (1 - abs(np.random.normal(0, 0.005))) for p in prices],
                'close': prices,
                'volume': np.random.uniform(1000, 10000, periods)
            })
            
            df.set_index('timestamp', inplace=True)
            return df
            
        else:
            print(f"‚ö†Ô∏è N√£o foi poss√≠vel obter pre√ßo real, usando simulado")
            return None
            
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao obter dados reais: {e}")
        return None

def get_script_signal_with_real_data():
    """Obter sinal via script usando dados pr√≥ximos aos reais"""
    try:
        # Configurar componentes
        config = Config()
        ai_engine = AITradingEngine(config)
        
        # Obter dados reais ou simulados
        df = get_real_market_data()
        if df is None:
            print("Usando dados simulados...")
            # Fallback para dados simulados
            periods = 150
            dates = pd.date_range(end=datetime.now(), periods=periods, freq='h')
            base_price = 100000  # Pr√≥ximo do pre√ßo real
            
            price_changes = np.random.normal(0, 0.01, periods)
            prices = [base_price]
            
            for i in range(1, periods):
                new_price = prices[-1] * (1 + price_changes[i])
                prices.append(new_price)
            
            df = pd.DataFrame({
                'timestamp': dates,
                'open': prices,
                'high': [p * (1 + abs(np.random.normal(0, 0.005))) for p in prices],
                'low': [p * (1 - abs(np.random.normal(0, 0.005))) for p in prices],
                'close': prices,
                'volume': np.random.uniform(1000, 10000, periods)
            })
            
            df.set_index('timestamp', inplace=True)
        
        symbol = "BTCUSDT"
          # Gerar sinal
        result = ai_engine.predict_signal(df, symbol)
        
        if result and isinstance(result, dict):
            # Simular estrutura similar √† API
            current_price = df['close'].iloc[-1]
            
            # Converter para formato similar ao sinal da API
            signal_data = {
                'signal_type': result.get('signal'),
                'confidence': result.get('confidence'),
                'entry_price': current_price,
                'symbol': symbol,
                'timeframe': '1h',
                'timestamp': datetime.now().isoformat(),
                'reasons': [result.get('reason', 'IA prediction')],
                'script_details': result  # Incluir dados completos do script
            }
            
            return signal_data
        else:
            print(f"‚ùå Script n√£o retornou sinal v√°lido: {result}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro no script: {e}")
        import traceback
        traceback.print_exc()
        return None

def compare_signals(api_signal, script_signal):
    """Comparar os dois sinais"""
    print("\n" + "="*60)
    print("üîç COMPARA√á√ÉO API vs SCRIPT (DADOS REAIS)")
    print("="*60)
    
    if not api_signal:
        print("‚ùå Sinal da API n√£o dispon√≠vel")
        return
        
    if not script_signal:
        print("‚ùå Sinal do script n√£o dispon√≠vel")
        return
    
    print("\nüìä SINAL DA API:")
    print("-"*30)
    print(f"   Tipo: {api_signal.get('signal_type')}")
    print(f"   Confian√ßa: {api_signal.get('confidence', 0):.4f}")
    print(f"   Pre√ßo: ${api_signal.get('entry_price', 0):,.2f}")
    print(f"   Timestamp: {api_signal.get('timestamp')}")
    if api_signal.get('reasons'):
        print(f"   Raz√µes: {len(api_signal.get('reasons', []))} motivos")
        for i, reason in enumerate(api_signal.get('reasons', [])[:3], 1):
            print(f"     {i}. {reason}")
    
    print("\nü§ñ SINAL DO SCRIPT:")
    print("-"*30)
    print(f"   Tipo: {script_signal.get('signal_type')}")
    print(f"   Confian√ßa: {script_signal.get('confidence', 0):.4f}")
    print(f"   Pre√ßo: ${script_signal.get('entry_price', 0):,.2f}")
    print(f"   Timestamp: {script_signal.get('timestamp')}")
    if script_signal.get('script_details'):
        details = script_signal.get('script_details')
        print(f"   Raz√£o IA: {details.get('reason')}")
        print(f"   Features: {details.get('ai_features', 0)}")
        if details.get('signals_breakdown'):
            breakdown = details.get('signals_breakdown')
            print(f"   Breakdown: {breakdown}")
    
    print("\nüî¨ AN√ÅLISE DE DIFEREN√áAS:")
    print("-"*30)
    
    # Comparar tipos de sinal
    api_type = api_signal.get('signal_type', '').lower()
    script_type = script_signal.get('signal_type', '').lower()
    
    if api_type == script_type:
        print(f"   ‚úÖ Tipo de sinal ID√äNTICO: {api_type}")
    else:
        print(f"   ‚ùå Tipo de sinal DIFERENTE: API={api_type} vs Script={script_type}")
    
    # Comparar confian√ßa
    api_conf = api_signal.get('confidence', 0)
    script_conf = script_signal.get('confidence', 0)
    conf_diff = abs(api_conf - script_conf)
    
    if conf_diff < 0.01:  # Diferen√ßa menor que 1%
        print(f"   ‚úÖ Confian√ßa SIMILAR: {conf_diff:.4f} diferen√ßa")
    else:
        print(f"   ‚ö†Ô∏è Confian√ßa DIFERENTE: {conf_diff:.4f} diferen√ßa")
    
    # Comparar pre√ßos
    api_price = api_signal.get('entry_price', 0)
    script_price = script_signal.get('entry_price', 0)
    price_diff = abs(api_price - script_price)
    price_diff_pct = (price_diff / max(api_price, script_price)) * 100 if max(api_price, script_price) > 0 else 0
    
    if price_diff_pct < 5.0:  # Diferen√ßa menor que 5% (mais tolerante para dados simulados)
        print(f"   ‚úÖ Pre√ßo SIMILAR: {price_diff_pct:.2f}% diferen√ßa")
    else:
        print(f"   ‚ö†Ô∏è Pre√ßo DIFERENTE: {price_diff_pct:.2f}% diferen√ßa")
    
    print("\nüéØ CONCLUS√ÉO:")
    print("-"*30)
    
    # Determinar se s√£o equivalentes
    same_signal = api_type == script_type
    similar_confidence = conf_diff < 0.1  # 10% de toler√¢ncia
    similar_price = price_diff_pct < 10.0   # 10% de toler√¢ncia para simula√ß√£o
    
    if same_signal and similar_confidence:
        print("   ‚úÖ SINAIS S√ÉO FUNCIONALMENTE EQUIVALENTES!")
        print("   üí° API e Script usam l√≥gica similar de IA")
        print("   üìù Pequenas diferen√ßas podem ser devido aos dados simulados")
    elif same_signal:
        print("   ‚ö†Ô∏è SINAIS PARCIALMENTE EQUIVALENTES")
        print("   üí° Mesmo tipo, mas diferen√ßas nos valores")
    else:
        print("   ‚ùå SINAIS S√ÉO DIFERENTES!")
        print("   üí° Pode haver diferen√ßa na l√≥gica ou dados")
        
    # An√°lise adicional
    if script_signal.get('script_details'):
        details = script_signal.get('script_details')
        if 'erro' in details.get('reason', '').lower() or 'error' in details.get('reason', '').lower():
            print("   üö® ATEN√á√ÉO: Script teve erro na an√°lise!")
            print("   üí° Revisar l√≥gica do AI Engine para casos edge")

def main():
    print("üöÄ INICIANDO COMPARA√á√ÉO API vs SCRIPT (DADOS REAIS)")
    print("Obtendo sinal da API...")
    
    # Obter sinais
    api_signal = get_api_signal()
    
    print("Obtendo sinal do script com dados reais...")
    script_signal = get_script_signal_with_real_data()
    
    # Comparar
    compare_signals(api_signal, script_signal)
    
    # Salvar dados para an√°lise
    comparison_data = {
        'timestamp': datetime.now().isoformat(),
        'api_signal': api_signal,
        'script_signal': script_signal,
        'test_type': 'real_data_comparison'
    }
    
    with open('comparison_results_real_data.json', 'w', encoding='utf-8') as f:
        json.dump(comparison_data, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ Dados salvos em: comparison_results_real_data.json")

if __name__ == "__main__":
    main()
