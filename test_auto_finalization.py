#!/usr/bin/env python3
"""
Teste do Sistema de Monitoramento Autom√°tico de Trades
Verifica se os trades est√£o sendo finalizados automaticamente
"""

import sys
import os
import time
import requests
import json
from datetime import datetime

def test_automatic_trade_finalization():
    """Testa se os trades est√£o sendo finalizados automaticamente"""
    print("üîÑ TESTE DE FINALIZA√á√ÉO AUTOM√ÅTICA DE TRADES")
    print("="*60)
    
    base_url = "http://localhost:5000"
    
    try:
        # 1. Verificar se o monitor autom√°tico est√° rodando
        print("\n1. üìä Verificando status do monitor autom√°tico...")
        monitor_response = requests.get(f"{base_url}/api/monitor/status")
        
        if monitor_response.status_code == 200:
            monitor_data = monitor_response.json()
            print(f"   Status: {'ATIVO' if monitor_data.get('running') else 'INATIVO'}")
            print(f"   Intervalo: {monitor_data.get('interval', 'N/A')} segundos")
            print(f"   Trades ativos: {monitor_data.get('active_trades_count', 0)}")
        else:
            print(f"   ‚ùå Erro ao verificar monitor: {monitor_response.status_code}")
        
        # 2. Gerar sinal de teste
        print("\n2. üéØ Gerando sinal de teste...")
        signal_response = requests.post(
            f"{base_url}/api/generate_signal",
            json={"symbol": "BTCUSDT", "timeframe": "1h"},
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        if signal_response.status_code != 200:
            print(f"   ‚ùå Erro ao gerar sinal: {signal_response.status_code}")
            return False
        
        signal_data = signal_response.json()
        if not signal_data.get('success'):
            print(f"   ‚ùå Erro no sinal: {signal_data.get('error')}")
            return False
        
        signal = signal_data['signal']
        print(f"   ‚úÖ Sinal gerado: {signal['signal_type']} @ ${signal['entry_price']:.2f}")
        print(f"   üìä Stop Loss: ${signal['stop_loss']:.2f}")
        print(f"   üìä Take Profit: ${signal['take_profit']:.2f}")
        
        # 3. Confirmar trade
        print("\n3. ‚úÖ Confirmando trade...")
        confirm_response = requests.post(
            f"{base_url}/api/paper_trading/confirm_signal",
            json={"signal": signal, "amount": 1000},
            headers={"Content-Type": "application/json"},
            timeout=15
        )
        
        if confirm_response.status_code != 200:
            print(f"   ‚ùå Erro ao confirmar: {confirm_response.status_code}")
            return False
        
        confirm_data = confirm_response.json()
        if not confirm_data.get('success'):
            print(f"   ‚ùå Erro na confirma√ß√£o: {confirm_data.get('error')}")
            return False
        
        trade_id = confirm_data.get('trade_id')
        print(f"   ‚úÖ Trade confirmado: {trade_id}")
        
        # 4. Monitorar por alguns ciclos
        print(f"\n4. üëÄ Monitorando trade por 2 minutos...")
        print(f"   Trade ID: {trade_id}")
        print(f"   Esperando finaliza√ß√£o autom√°tica...")
        
        monitoring_start = time.time()
        monitoring_duration = 120  # 2 minutos
        check_interval = 10  # verificar a cada 10 segundos
        
        while time.time() - monitoring_start < monitoring_duration:
            # Verificar portfolio atual
            portfolio_response = requests.get(f"{base_url}/api/paper_trading/portfolio")
            
            if portfolio_response.status_code == 200:
                portfolio_data = portfolio_response.json()
                active_trades = portfolio_data.get('active_trades', [])
                
                # Verificar se nosso trade ainda est√° ativo
                trade_still_active = any(trade['id'] == trade_id for trade in active_trades)
                
                if not trade_still_active:
                    elapsed = time.time() - monitoring_start
                    print(f"\n   ‚úÖ TRADE FINALIZADO AUTOMATICAMENTE!")
                    print(f"   ‚è±Ô∏è Tempo at√© finaliza√ß√£o: {elapsed:.1f} segundos")
                    
                    # Verificar no hist√≥rico
                    history_response = requests.get(f"{base_url}/api/paper_trading/history")
                    if history_response.status_code == 200:
                        history_data = history_response.json()
                        if history_data.get('success'):
                            trades_history = history_data.get('trades', [])
                            
                            # Encontrar nosso trade no hist√≥rico
                            closed_trade = None
                            for trade in trades_history:
                                if trade.get('id') == trade_id:
                                    closed_trade = trade
                                    break
                            
                            if closed_trade:
                                print(f"   üìä Motivo do fechamento: {closed_trade.get('exit_reason', 'N/A')}")
                                print(f"   üí∞ P&L: ${closed_trade.get('realized_pnl', 0):.2f}")
                                print(f"   üìà Pre√ßo de sa√≠da: ${closed_trade.get('exit_price', 0):.2f}")
                                
                                return True
                    
                    return True
                else:
                    # Trade ainda ativo - mostrar status
                    current_trade = None
                    for trade in active_trades:
                        if trade['id'] == trade_id:
                            current_trade = trade
                            break
                    
                    if current_trade:
                        elapsed = time.time() - monitoring_start
                        current_price = current_trade.get('current_price', 0)
                        unrealized_pnl = current_trade.get('unrealized_pnl', 0)
                        
                        print(f"   ‚è±Ô∏è {elapsed:.0f}s - Pre√ßo atual: ${current_price:.2f} | P&L: ${unrealized_pnl:.2f}")
            
            time.sleep(check_interval)
        
        # Se chegou aqui, o trade n√£o foi finalizado no tempo esperado
        print(f"\n   ‚ö†Ô∏è Trade n√£o foi finalizado automaticamente em {monitoring_duration} segundos")
        print(f"   üìã Verificando se ainda est√° ativo...")
        
        # Verifica√ß√£o final
        portfolio_response = requests.get(f"{base_url}/api/paper_trading/portfolio")
        if portfolio_response.status_code == 200:
            portfolio_data = portfolio_response.json()
            active_trades = portfolio_data.get('active_trades', [])
            
            trade_still_active = any(trade['id'] == trade_id for trade in active_trades)
            
            if trade_still_active:
                print(f"   ‚ùå PROBLEMA: Trade ainda ativo ap√≥s {monitoring_duration} segundos")
                print(f"   üîß Poss√≠veis causas:")
                print(f"      - Monitor autom√°tico n√£o est√° funcionando")
                print(f"      - Pre√ßos n√£o atingiram SL/TP")
                print(f"      - Erro no sistema de atualiza√ß√£o de pre√ßos")
                
                # Fechar manualmente para limpeza
                print(f"\n   üîí Fechando trade manualmente para limpeza...")
                close_response = requests.post(
                    f"{base_url}/api/paper_trading/close_trade",
                    json={"trade_id": trade_id},
                    headers={"Content-Type": "application/json"}
                )
                
                if close_response.status_code == 200:
                    print(f"   ‚úÖ Trade fechado manualmente")
                
                return False
            else:
                print(f"   ‚úÖ Trade foi finalizado (verifica√ß√£o final)")
                return True
        
        return False
        
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")
        return False

def test_monitor_status():
    """Testa apenas o status do monitor"""
    print("\nüîç TESTE R√ÅPIDO - STATUS DO MONITOR")
    print("="*40)
    
    base_url = "http://localhost:5000"
    
    try:
        # Status do monitor
        monitor_response = requests.get(f"{base_url}/api/monitor/status", timeout=10)
        
        if monitor_response.status_code == 200:
            monitor_data = monitor_response.json()
            print(f"‚úÖ Monitor Status:")
            print(f"   üîÑ Rodando: {'SIM' if monitor_data.get('running') else 'N√ÉO'}")
            print(f"   ‚è±Ô∏è Intervalo: {monitor_data.get('interval', 'N/A')} segundos")
            print(f"   üìä Trades ativos: {monitor_data.get('active_trades_count', 0)}")
            
            return monitor_data.get('running', False)
        else:
            print(f"‚ùå Erro ao verificar monitor: {monitor_response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def main():
    """Executar testes do sistema de monitoramento"""
    print("üöÄ DIAGN√ìSTICO DO SISTEMA DE MONITORAMENTO AUTOM√ÅTICO")
    print("="*80)
    
    # Teste 1: Status do monitor
    monitor_ok = test_monitor_status()
    
    if not monitor_ok:
        print("\n‚ùå PROBLEMA IDENTIFICADO: Monitor autom√°tico n√£o est√° rodando!")
        print("üí° SOLU√á√ïES:")
        print("   1. Reiniciar o servidor main.py")
        print("   2. Verificar logs de erro")
        print("   3. Chamar POST /api/monitor/start")
        return
    
    # Teste 2: Finaliza√ß√£o autom√°tica
    print("\n" + "="*80)
    auto_finalization_ok = test_automatic_trade_finalization()
    
    # Resumo
    print("\n" + "="*80)
    print("üìä RESUMO DO DIAGN√ìSTICO")
    print("="*80)
    print(f"Monitor Autom√°tico: {'‚úÖ FUNCIONANDO' if monitor_ok else '‚ùå PROBLEMA'}")
    print(f"Finaliza√ß√£o Autom√°tica: {'‚úÖ FUNCIONANDO' if auto_finalization_ok else '‚ùå PROBLEMA'}")
    
    if monitor_ok and auto_finalization_ok:
        print("\nüéâ SISTEMA DE MONITORAMENTO FUNCIONANDO CORRETAMENTE!")
    elif monitor_ok and not auto_finalization_ok:
        print("\n‚ö†Ô∏è PROBLEMA: Monitor ativo mas trades n√£o finalizam automaticamente")
        print("üí° Verificar:")
        print("   - Sistema de pre√ßos em tempo real")
        print("   - L√≥gica de Stop Loss / Take Profit")
        print("   - Logs do servidor para erros")
    else:
        print("\n‚ùå PROBLEMA: Sistema de monitoramento n√£o est√° funcionando")
        print("üí° Reiniciar o servidor e verificar logs")

if __name__ == "__main__":
    main()
