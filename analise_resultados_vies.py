#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìä AN√ÅLISE DOS RESULTADOS DE VI√âS - Adaptado para dados com a√ß√£o null
"""

import json
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Carregar dados
with open('teste_vies_20250613_232926.json', 'r') as f:
    dados_brutos = json.load(f)

df = pd.DataFrame(dados_brutos)

print("üîç AN√ÅLISE DOS RESULTADOS DE TESTE DE VI√âS")
print("=" * 50)

# Estat√≠sticas gerais
total_testes = len(df)
sucessos = len(df[df['sucesso'] == True])
taxa_sucesso = sucessos / total_testes * 100

print(f"üìä ESTAT√çSTICAS GERAIS:")
print(f"  Total de testes: {total_testes}")
print(f"  Sucessos: {sucessos}")
print(f"  Falhas: {total_testes - sucessos}")
print(f"  Taxa de sucesso: {taxa_sucesso:.1f}%")

# Verificar problema com a√ß√µes
dados_validos = df[df['sucesso'] == True]
acoes_null = dados_validos['acao'].isnull().sum()
print(f"\n‚ö†Ô∏è  PROBLEMA IDENTIFICADO:")
print(f"  Sinais com a√ß√£o NULL: {acoes_null}/{len(dados_validos)}")
print(f"  Isso indica um bug na API de gera√ß√£o de sinais!")

# An√°lise de confian√ßa
print(f"\nüéØ AN√ÅLISE DE CONFIAN√áA:")
confianca_stats = dados_validos['confianca'].describe()
print(f"  M√≠nima: {confianca_stats['min']:.1f}%")
print(f"  M√°xima: {confianca_stats['max']:.1f}%")
print(f"  M√©dia: {confianca_stats['mean']:.1f}%")
print(f"  Mediana: {confianca_stats['50%']:.1f}%")

# An√°lise por ativo
print(f"\nüìà CONFIAN√áA M√âDIA POR ATIVO:")
confianca_por_ativo = dados_validos.groupby('ativo')['confianca'].agg(['mean', 'std', 'count']).round(1)
for ativo, stats in confianca_por_ativo.iterrows():
    print(f"  {ativo}: {stats['mean']:.1f}% ¬±{stats['std']:.1f}% ({stats['count']} sinais)")

# An√°lise por timeframe
print(f"\n‚è∞ CONFIAN√áA M√âDIA POR TIMEFRAME:")
confianca_por_tf = dados_validos.groupby('timeframe')['confianca'].agg(['mean', 'std', 'count']).round(1)
for tf, stats in confianca_por_tf.iterrows():
    print(f"  {tf}: {stats['mean']:.1f}% ¬±{stats['std']:.1f}% ({stats['count']} sinais)")

# Gerar gr√°ficos
plt.style.use('dark_background')
fig, axes = plt.subplots(2, 2, figsize=(15, 10))

# 1. Distribui√ß√£o de confian√ßa
axes[0,0].hist(dados_validos['confianca'], bins=20, color='skyblue', alpha=0.7, edgecolor='white')
axes[0,0].set_title('Distribui√ß√£o de Confian√ßa', fontweight='bold', color='white')
axes[0,0].set_xlabel('Confian√ßa (%)', color='white')
axes[0,0].set_ylabel('Frequ√™ncia', color='white')
axes[0,0].axvline(dados_validos['confianca'].mean(), color='red', linestyle='--', 
                  label=f'M√©dia: {dados_validos["confianca"].mean():.1f}%')
axes[0,0].legend()

# 2. Confian√ßa por ativo
confianca_por_ativo_sorted = dados_validos.groupby('ativo')['confianca'].mean().sort_values()
bars = axes[0,1].bar(range(len(confianca_por_ativo_sorted)), confianca_por_ativo_sorted.values, 
                     color='lightgreen', alpha=0.8)
axes[0,1].set_title('Confian√ßa M√©dia por Ativo', fontweight='bold', color='white')
axes[0,1].set_ylabel('Confian√ßa (%)', color='white')
axes[0,1].set_xticks(range(len(confianca_por_ativo_sorted)))
axes[0,1].set_xticklabels(confianca_por_ativo_sorted.index, rotation=45, ha='right')

# Adicionar valores nas barras
for i, bar in enumerate(bars):
    height = bar.get_height()
    axes[0,1].text(bar.get_x() + bar.get_width()/2., height + 0.5,
                   f'{height:.1f}%', ha='center', va='bottom', fontweight='bold', color='white')

# 3. Confian√ßa por timeframe
confianca_por_tf_sorted = dados_validos.groupby('timeframe')['confianca'].mean().sort_values()
bars = axes[1,0].bar(confianca_por_tf_sorted.index, confianca_por_tf_sorted.values, 
                     color='orange', alpha=0.8)
axes[1,0].set_title('Confian√ßa M√©dia por Timeframe', fontweight='bold', color='white')
axes[1,0].set_ylabel('Confian√ßa (%)', color='white')
axes[1,0].set_xlabel('Timeframe', color='white')

# Adicionar valores nas barras
for bar in bars:
    height = bar.get_height()
    axes[1,0].text(bar.get_x() + bar.get_width()/2., height + 0.5,
                   f'{height:.1f}%', ha='center', va='bottom', fontweight='bold', color='white')

# 4. Heatmap de confian√ßa (ativo vs timeframe)
pivot_confianca = dados_validos.pivot_table(values='confianca', index='ativo', 
                                           columns='timeframe', aggfunc='mean')
sns.heatmap(pivot_confianca, annot=True, fmt='.1f', cmap='RdYlGn', 
            ax=axes[1,1], cbar_kws={'label': 'Confian√ßa (%)'})
axes[1,1].set_title('Confian√ßa por Ativo √ó Timeframe', fontweight='bold', color='white')

plt.tight_layout()
plt.savefig('analise_vies_confianca.png', dpi=300, bbox_inches='tight', facecolor='black')
plt.show()

print(f"\nüíæ Gr√°fico salvo: analise_vies_confianca.png")

# Identificar padr√µes interessantes
print(f"\nüîç PADR√ïES IDENTIFICADOS:")

# Ativo com maior/menor confian√ßa m√©dia
ativo_max_conf = confianca_por_ativo_sorted.idxmax()
ativo_min_conf = confianca_por_ativo_sorted.idxmin()
print(f"  Ativo com MAIOR confian√ßa: {ativo_max_conf} ({confianca_por_ativo_sorted[ativo_max_conf]:.1f}%)")
print(f"  Ativo com MENOR confian√ßa: {ativo_min_conf} ({confianca_por_ativo_sorted[ativo_min_conf]:.1f}%)")

# Timeframe com maior/menor confian√ßa m√©dia
tf_max_conf = confianca_por_tf_sorted.idxmax()
tf_min_conf = confianca_por_tf_sorted.idxmin()
print(f"  Timeframe com MAIOR confian√ßa: {tf_max_conf} ({confianca_por_tf_sorted[tf_max_conf]:.1f}%)")
print(f"  Timeframe com MENOR confian√ßa: {tf_min_conf} ({confianca_por_tf_sorted[tf_min_conf]:.1f}%)")

# An√°lise de spread stop/take
dados_validos['spread_stop'] = abs(dados_validos['preco_entrada'] - dados_validos['stop_loss']) / dados_validos['preco_entrada'] * 100
dados_validos['spread_take'] = abs(dados_validos['take_profit'] - dados_validos['preco_entrada']) / dados_validos['preco_entrada'] * 100
dados_validos['risk_reward'] = dados_validos['spread_take'] / dados_validos['spread_stop']

print(f"\nüìä AN√ÅLISE RISK/REWARD:")
print(f"  Risk/Reward m√©dio: {dados_validos['risk_reward'].mean():.2f}")
print(f"  Stop Loss m√©dio: {dados_validos['spread_stop'].mean():.2f}%")
print(f"  Take Profit m√©dio: {dados_validos['spread_take'].mean():.2f}%")

print(f"\n‚ö†Ô∏è  RECOMENDA√á√ïES:")
print(f"  1. Corrigir o bug na API que est√° retornando a√ß√£o = null")
print(f"  2. Investigar por que alguns ativos t√™m confian√ßa consistentemente baixa")
print(f"  3. Analisar se timeframes longos devem ter confian√ßa diferente dos curtos")
print(f"  4. Ap√≥s corre√ß√£o, repetir teste para an√°lise completa de vi√©s")

print(f"\n‚úÖ An√°lise conclu√≠da!")
