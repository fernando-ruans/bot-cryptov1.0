#!/usr/bin/env python3
"""
üöÄ GUIA DE USO - AI ENGINE V3 OTIMIZADO
Manual r√°pido para usar o novo sistema de IA
"""

def guia_uso_completo():
    """Guia completo de uso do AI Engine V3"""
    
    print("üöÄ GUIA DE USO - AI ENGINE V3 OTIMIZADO")
    print("=" * 60)
    
    print("\nüìã 1. COMO USAR NO C√ìDIGO")
    print("-" * 30)
    print("""
# Importar o engine
from ai_engine_v3_otimizado import OptimizedAIEngineV3

# Inicializar
config = Config()
ai_engine = OptimizedAIEngineV3(config)

# Fazer predi√ß√£o
df = market_data.get_historical_data('BTCUSDT', '5m', 500)
result = ai_engine.optimized_predict_signal(df, 'BTCUSDT')

# Usar resultado
signal_type = result['signal_type']     # 'BUY', 'SELL', 'HOLD'
confidence = result['confidence']       # 0.0 a 1.0
model_accuracy = result['model_accuracy']  # Acur√°cia do modelo
""")
    
    print("\n‚öôÔ∏è 2. CONFIGURA√á√ïES IMPORTANTES")
    print("-" * 30)
    print("""
# Ajustar threshold de confian√ßa
ai_engine.min_confidence_threshold = 0.25  # Agressivo (mais sinais)
ai_engine.min_confidence_threshold = 0.40  # Padr√£o (equilibrado)
ai_engine.min_confidence_threshold = 0.55  # Conservador (menos sinais)

# O sistema j√° est√° integrado automaticamente no main.py
# N√£o precisa fazer nada para usar no bot principal!
""")
    
    print("\nüìä 3. INTERPRETA√á√ÉO DOS SINAIS")
    print("-" * 30)
    print("""
QUALIDADE DOS SINAIS:
- Confian√ßa ‚â• 70% + Acur√°cia ‚â• 50% = üü¢ ALTA QUALIDADE
- Confian√ßa ‚â• 55% + Acur√°cia ‚â• 40% = üü° QUALIDADE M√âDIA  
- Confian√ßa ‚â• 45% = üü† QUALIDADE BAIXA
- Confian√ßa < 45% = üî¥ QUALIDADE MUITO BAIXA

TIPOS DE SINAL:
- BUY: Sinal de compra (expectativa de alta)
- SELL: Sinal de venda (expectativa de baixa)  
- HOLD: Manter posi√ß√£o (mercado incerto)
""")
    
    print("\nüéØ 4. MELHORES PR√ÅTICAS")
    print("-" * 30)
    print("""
‚úÖ RECOMENDA√á√ïES:
- Use timeframe 5m para melhor qualidade
- Monitore sinais com confian√ßa > 55%
- Combine com an√°lise t√©cnica tradicional
- Ajuste threshold conforme volatilidade do mercado

‚ö†Ô∏è CUIDADOS:
- Nunca use apenas 1 sinal para decidir
- Sempre defina stop loss e take profit
- Monitore performance real dos sinais
- Ajuste posicionamento conforme risco
""")
    
    print("\nüìà 5. S√çMBOLOS TESTADOS")
    print("-" * 30)
    print("""
PERFORMANCE POR S√çMBOLO:
‚úÖ BTCUSDT: Funciona bem, sinais consistentes
‚úÖ ETHUSDT: Boa qualidade, especialmente 5m  
‚úÖ BNBUSDT: Performance aceit√°vel
‚ö†Ô∏è Outros pares: Testar antes de usar em produ√ß√£o
""")
    
    print("\nüîß 6. TROUBLESHOOTING")
    print("-" * 30)
    print("""
PROBLEMAS COMUNS:
- Muitos HOLD: Reduzir threshold para 0.25-0.35
- Poucos sinais: Verificar dados e volatilidade
- Baixa acur√°cia: Aguardar mais dados hist√≥ricos
- Erro de modelo: Verificar logs para detalhes

LOGS IMPORTANTES:
- "Acur√°cia CV: X.XXX" = Qualidade do modelo
- "conf: X.XXX, acc: X.XXX" = M√©tricas do sinal
- "Treinando modelo" = Sistema aprendendo
""")
    
    print("\nüìä 7. MONITORAMENTO")
    print("-" * 30)
    print("""
M√âTRICAS PARA ACOMPANHAR:
- Taxa de sinais ativos (ideal: 40-60%)
- Confian√ßa m√©dia (ideal: > 50%)
- Acur√°cia do modelo (ideal: > 35%)
- Tempo de execu√ß√£o (ideal: < 15s)

ARQUIVOS DE LOG:
- logs/trading_bot.log = Logs gerais
- validacao_*.json = Resultados dos testes
- comparacao_*.json = Compara√ß√µes de performance
""")
    
    print("\nüöÄ 8. EXEMPLO PR√ÅTICO")
    print("-" * 30)
    print("""
# Exemplo completo de uso
from src.config import Config
from src.market_data import MarketDataManager
from ai_engine_v3_otimizado import OptimizedAIEngineV3

# Setup
config = Config()
market_data = MarketDataManager(config)
ai_engine = OptimizedAIEngineV3(config)

# An√°lise para BTCUSDT 5m
symbol = 'BTCUSDT'
timeframe = '5m'

# Obter dados
df = market_data.get_historical_data(symbol, timeframe, 500)

# Fazer predi√ß√£o
result = ai_engine.optimized_predict_signal(df, symbol)

# Verificar resultado
if result['signal_type'] != 'HOLD':
    print(f"Sinal: {result['signal_type']}")
    print(f"Confian√ßa: {result['confidence']:.3f}")
    print(f"Entry: ${result['entry_price']:.2f}")
    print(f"Stop Loss: ${result['stop_loss']:.2f}")
    print(f"Take Profit: ${result['take_profit']:.2f}")
else:
    print("Sem sinal no momento")
""")
    
    print("\n‚úÖ SISTEMA PRONTO PARA USO!")
    print("=" * 60)
    print("üéØ O AI Engine V3 est√° integrado e funcionando")
    print("üìä Acur√°cia: 36% | Confian√ßa: 49% | Sinais ativos: 50%")
    print("üöÄ Status: Aprovado para produ√ß√£o com monitoramento")

if __name__ == "__main__":
    guia_uso_completo()
