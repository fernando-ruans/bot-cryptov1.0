#!/usr/bin/env python3
"""
Debug espec√≠fico do problema de P&L n√£o atualizando
"""

import requests
import time

def debug_pnl_update():
    print("üîß DEBUG - PROBLEMA DE P&L N√ÉO ATUALIZANDO")
    print("="*60)
    
    base_url = "http://localhost:5000"
    
    # 1. Verificar se a API de pre√ßos em tempo real est√° funcionando
    print("\n1. üîç Testando API de pre√ßos em tempo real...")
    try:
        # Tentar obter pre√ßo atual via endpoint direto (se existir)
        r = requests.get(f"{base_url}/api/realtime/price/BTCUSDT", timeout=5)
        if r.status_code == 200:
            data = r.json()
            print(f"   ‚úÖ Pre√ßo em tempo real: ${data.get('price', 'N/A')}")
        else:
            print(f"   ‚ö†Ô∏è Endpoint direto n√£o dispon√≠vel: {r.status_code}")
    except:
        print("   ‚ö†Ô∏è Erro ao acessar API de pre√ßos direta")
    
    # 2. Criar trade e verificar se P&L √© calculado
    print("\n2. üéØ Criando trade de teste...")
    
    # Gerar sinal
    try:
        r = requests.post(f"{base_url}/api/generate_signal",
                         json={"symbol": "BTCUSDT", "timeframe": "1m"},
                         headers={"Content-Type": "application/json"},
                         timeout=30)
        
        if r.status_code == 200:
            signal_data = r.json()
            if signal_data.get("success"):
                signal = signal_data["signal"]
                print(f"   ‚úÖ Sinal: {signal['signal_type']} @ ${signal['entry_price']:.2f}")
            else:
                print(f"   ‚ùå Erro no sinal: {signal_data.get('error')}")
                return
        else:
            print(f"   ‚ùå Erro HTTP: {r.status_code}")
            return
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        return
    
    # Confirmar trade
    try:
        r = requests.post(f"{base_url}/api/paper_trading/confirm_signal",
                         json={"signal": signal, "amount": 1000},
                         headers={"Content-Type": "application/json"},
                         timeout=15)
        
        if r.status_code == 200:
            confirm_data = r.json()
            if confirm_data.get("success"):
                trade_id = confirm_data.get("trade_id")
                print(f"   ‚úÖ Trade criado: {trade_id}")
            else:
                print(f"   ‚ùå Erro na confirma√ß√£o: {confirm_data.get('error')}")
                return
        else:
            print(f"   ‚ùå Erro HTTP: {r.status_code}")
            return
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        return
    
    # 3. Verificar estado inicial do trade
    print(f"\n3. üìä Estado inicial do trade...")
    try:
        r = requests.get(f"{base_url}/api/paper_trading/portfolio", timeout=5)
        if r.status_code == 200:
            data = r.json()
            active_trades = data.get("active_trades", [])
            
            our_trade = None
            for trade in active_trades:
                if trade["id"] == trade_id:
                    our_trade = trade
                    break
            
            if our_trade:
                print(f"   üìä Entry Price: ${our_trade.get('entry_price', 0):.2f}")
                print(f"   üìä Current Price: ${our_trade.get('current_price', 0):.2f}")
                print(f"   üìä Quantity: {our_trade.get('quantity', 0):.6f}")
                print(f"   üìä Unrealized P&L: ${our_trade.get('unrealized_pnl', 0):.2f}")
                print(f"   üìä Stop Loss: ${our_trade.get('stop_loss', 0):.2f}")
                print(f"   üìä Take Profit: ${our_trade.get('take_profit', 0):.2f}")
            else:
                print("   ‚ùå Trade n√£o encontrado!")
                return
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        return
    
    # 4. For√ßar atualiza√ß√£o manual de pre√ßos
    print(f"\n4. üîÑ For√ßando atualiza√ß√£o manual de pre√ßos...")
    try:
        r = requests.post(f"{base_url}/api/paper_trading/update_prices",
                         headers={"Content-Type": "application/json"},
                         timeout=10)
        if r.status_code == 200:
            data = r.json()
            print(f"   ‚úÖ Atualiza√ß√£o for√ßada: {data.get('success', False)}")
            if "message" in data:
                print(f"   üìù Mensagem: {data['message']}")
        else:
            print(f"   ‚ùå Endpoint n√£o dispon√≠vel: {r.status_code}")
            print("   üí° Vou tentar aguardar ciclo natural do monitor...")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        print("   üí° Vou aguardar ciclo natural do monitor...")
    
    # 5. Aguardar e verificar se P&L foi atualizado
    print(f"\n5. ‚è±Ô∏è Aguardando 40 segundos (1+ ciclo do monitor)...")
    time.sleep(40)
    
    print(f"\n6. üìä Verificando se P&L foi atualizado...")
    try:
        r = requests.get(f"{base_url}/api/paper_trading/portfolio", timeout=5)
        if r.status_code == 200:
            data = r.json()
            active_trades = data.get("active_trades", [])
            
            our_trade = None
            for trade in active_trades:
                if trade["id"] == trade_id:
                    our_trade = trade
                    break
            
            if our_trade:
                entry_price = our_trade.get('entry_price', 0)
                current_price = our_trade.get('current_price', 0)
                unrealized_pnl = our_trade.get('unrealized_pnl', 0)
                
                print(f"   üìä Entry Price: ${entry_price:.2f}")
                print(f"   üìä Current Price: ${current_price:.2f}")
                print(f"   üìä Unrealized P&L: ${unrealized_pnl:.2f}")
                
                # Verificar se houve mudan√ßa
                price_changed = abs(current_price - entry_price) > 0.01
                pnl_calculated = abs(unrealized_pnl) > 0.01
                
                if price_changed:
                    print(f"   ‚úÖ Pre√ßo foi atualizado!")
                else:
                    print(f"   ‚ùå Pre√ßo n√£o mudou!")
                
                if pnl_calculated:
                    print(f"   ‚úÖ P&L foi calculado!")
                else:
                    print(f"   ‚ùå P&L n√£o foi calculado!")
                
                if not price_changed and not pnl_calculated:
                    print(f"\n   üö® PROBLEMA IDENTIFICADO:")
                    print(f"   - O sistema de atualiza√ß√£o de pre√ßos n√£o est√° funcionando")
                    print(f"   - Monitor autom√°tico pode n√£o estar chamando update_prices()")
                    print(f"   - API de tempo real pode n√£o estar retornando pre√ßos")
                
            else:
                print("   ‚ÑπÔ∏è Trade foi finalizado automaticamente!")
                return True
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
    
    # Limpeza
    print(f"\n7. üßπ Limpeza...")
    try:
        r = requests.post(f"{base_url}/api/paper_trading/close_trade",
                         json={"trade_id": trade_id},
                         headers={"Content-Type": "application/json"})
        if r.status_code == 200:
            print("   ‚úÖ Trade fechado para limpeza")
    except:
        pass

if __name__ == "__main__":
    debug_pnl_update()
