#!/usr/bin/env python3
"""
Teste espec√≠fico para verificar se o problema de cooldown foi resolvido
Testa m√∫ltiplas chamadas consecutivas ao endpoint de gera√ß√£o de sinais
"""

import sys
import os
import time
import requests
import json
from datetime import datetime

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_cooldown_fix():
    """Testa se o cooldown foi resolvido fazendo m√∫ltiplas chamadas"""
    print("üîß TESTE DE RESOLU√á√ÉO DO COOLDOWN")
    print("=" * 50)
    
    # URL do endpoint
    url = "http://localhost:5000/api/generate_signal"
    
    # Dados da requisi√ß√£o
    payload = {
        "symbol": "BTCUSDT",
        "timeframe": "1h"
    }
    
    headers = {
        "Content-Type": "application/json"
    }
    
    print(f"üéØ Testando endpoint: {url}")
    print(f"üìä Dados: {payload}")
    print()
    
    # Fazer 5 chamadas consecutivas
    for i in range(1, 6):
        print(f"üìû CHAMADA {i}/5")
        print(f"   ‚è∞ Hora: {datetime.now().strftime('%H:%M:%S.%f')[:-3]}")
        
        start_time = time.time()
        
        try:
            response = requests.post(url, json=payload, headers=headers, timeout=30)
            end_time = time.time()
            duration = end_time - start_time
            
            print(f"   ‚ö° Dura√ß√£o: {duration:.3f}s")
            print(f"   üìà Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                
                if data.get('success'):
                    signal = data.get('signal', {})
                    print(f"   ‚úÖ SUCESSO!")
                    print(f"      Tipo: {signal.get('signal_type', 'N/A')}")
                    print(f"      Confian√ßa: {signal.get('confidence', 0):.2%}")
                    print(f"      Pre√ßo: ${signal.get('entry_price', 0):.2f}")
                else:
                    print(f"   ‚ùå FALHA: {data.get('error', 'Erro desconhecido')}")
                    error_type = data.get('error_type', 'unknown')
                    print(f"      Tipo: {error_type}")
                    
                    if error_type == 'cooldown':
                        print(f"      üö® PROBLEMA DE COOLDOWN AINDA EXISTE!")
                        return False
            
            elif response.status_code == 429:
                print(f"   üö® COOLDOWN ATIVO! Status 429")
                return False
            
            else:
                print(f"   ‚ö†Ô∏è  Status inesperado: {response.status_code}")
                print(f"      Resposta: {response.text[:200]}")
        
        except requests.exceptions.RequestException as e:
            print(f"   üí• ERRO DE CONEX√ÉO: {e}")
            return False
        
        except Exception as e:
            print(f"   üí• ERRO GERAL: {e}")
            return False
        
        print()
        
        # Pequeno delay entre chamadas para simular uso real
        if i < 5:
            time.sleep(0.5)
    
    print("üéâ TESTE CONCLU√çDO!")
    print("‚úÖ Problema de cooldown parece estar resolvido!")
    return True

def test_direct_vs_endpoint_comparison():
    """Comparar execu√ß√£o direta vs endpoint ap√≥s fix"""
    print("\nüîÑ TESTE COMPARATIVO P√ìS-FIX")
    print("=" * 40)
    
    try:
        # Teste direto
        print("1Ô∏è‚É£ Testando execu√ß√£o DIRETA...")
        from src.config import Config
        from src.market_data import MarketDataManager
        from src.ai_engine import AITradingEngine
        from src.signal_generator import SignalGenerator
        
        config = Config()
        market_data = MarketDataManager(config)
        ai_engine = AITradingEngine(config)
        signal_generator = SignalGenerator(ai_engine, market_data)
        
        start_time = time.time()
        signal_direct = signal_generator.generate_signal('BTCUSDT', '1h')
        direct_duration = time.time() - start_time
        
        if signal_direct:
            print(f"   ‚úÖ Direto: {signal_direct.signal_type} ({signal_direct.confidence:.2%}) em {direct_duration:.2f}s")
        else:
            print(f"   ‚ùå Direto: Nenhum sinal em {direct_duration:.2f}s")
        
        # Teste endpoint
        print("2Ô∏è‚É£ Testando via ENDPOINT...")
        payload = {"symbol": "BTCUSDT", "timeframe": "1h"}
        
        start_time = time.time()
        response = requests.post("http://localhost:5000/api/generate_signal", 
                               json=payload, timeout=30)
        endpoint_duration = time.time() - start_time
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                signal = data.get('signal', {})
                print(f"   ‚úÖ Endpoint: {signal.get('signal_type')} ({signal.get('confidence', 0):.2%}) em {endpoint_duration:.2f}s")
            else:
                print(f"   ‚ùå Endpoint: {data.get('error')} em {endpoint_duration:.2f}s")
        else:
            print(f"   ‚ùå Endpoint: Status {response.status_code} em {endpoint_duration:.2f}s")
        
        print(f"\nüìä COMPARA√á√ÉO:")
        print(f"   Direto: {direct_duration:.3f}s")
        print(f"   Endpoint: {endpoint_duration:.3f}s")
        
        return True
        
    except Exception as e:
        print(f"üí• Erro no teste comparativo: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ INICIANDO TESTES DE CORRE√á√ÉO DO COOLDOWN")
    print("=" * 60)
    
    # Verificar se o servidor est√° rodando
    try:
        response = requests.get("http://localhost:5000/", timeout=5)
        print("‚úÖ Servidor Flask est√° rodando")
    except:
        print("‚ùå ERRO: Servidor Flask n√£o est√° rodando!")
        print("   Execute: python main.py")
        sys.exit(1)
    
    print()
    
    # Teste principal de cooldown
    success = test_cooldown_fix()
    
    if success:
        # Teste comparativo
        test_direct_vs_endpoint_comparison()
        
        print("\nüéâ TODOS OS TESTES CONCLU√çDOS!")
        print("‚úÖ O problema de cooldown foi resolvido com sucesso!")
    else:
        print("\n‚ùå PROBLEMA AINDA EXISTE!")
        print("   O sistema de cooldown ainda est√° bloqueando chamadas.")
    
    print("\n" + "=" * 60)
